version: '3'

services:
  mongodb:
    image: 'mongo:latest'
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    networks:
      - mynetwork
    command: mongod --noauth
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://mongodb:27017/ --quiet
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 40s

  minio:
    image: minio/minio:latest
    container_name: minio-engself
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --address :9000 /data --console-address :9090
    ports:
      - '9090:9090'
      - '9000:9000'
    volumes:
      - minio-data:/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  createbuckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin; do
        echo 'Waiting for Minio to be ready...';
        sleep 5;
      done;
      /usr/bin/mc mb myminio/avatars;
      /usr/bin/mc mb myminio/checks;
      /usr/bin/mc mb myminio/temp-checks;
      /usr/bin/mc policy set public myminio/avatars;
      /usr/bin/mc policy set public myminio/checks;
      /usr/bin/mc policy set public myminio/temp-checks;
      exit 0;
      "
    networks:
      - mynetwork

  kafka:
    image: 'bitnami/kafka:3.9'
    networks:
      - mynetwork
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093, DOCKER://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT, DOCKER:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,DOCKER://kafka:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    depends_on:
      - kafka
    networks:
      - mynetwork
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9094

  keycloak-postgres:
    image: library/postgres:${KC_POSTGRES_IMAGE_TAG:-14}
    container_name: sovcomcheckPostgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: pg_isready -d postgres
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - ${KC_POSTGRES_PORT_MAPPING:-5435}:5432
    deploy:
      resources:
        limits:
          memory: 256M

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    container_name: sovcomcheckKeycloak
    command:
      - start --auto-build --db postgres --hostname-strict-https false --hostname-strict false --proxy edge --http-enabled true --import-realm --spi-user-profile-legacy-user-profile-read-only-attributes *_RES_ACCESS_MODE
    environment:
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_SCHEMA: public
      KC_FEATURES: preview
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - 8282:8080
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/realms/master"]
      start_period: 10s
      interval: 30s
      retries: 3
      timeout: 5s

  backend-service:
    container_name: backend-service
    build:
      context: ../back-end
      dockerfile: ../back-end/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - mynetwork
    environment:
      - mongo_host=mongodb
      - kafka_bootstrap_servers=kafka:9094
      - minio_url=http://minio:9000
      - minio_access_key=minioadmin
      - minio_secret_key=minioadmin
      - ml_service_url=http://ml-service:5000

  ml-service:
    ports:
        - "5000:5000"
    container_name: ml-service
    build:
      context: ../ml-service
      dockerfile: ../ml-service/Dockerfile

    ports:
      - "5000:5000"
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  minio-data:
    driver: local
  mongo-data:
    driver: local